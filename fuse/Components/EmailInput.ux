<StackPanel ux:Class="EmailInput" Text="" ErrorMessage="" IsValid="initial" InputHint="Email" AutoCapitalizationHint="" ActionStyle="" ActionTriggered="">
    <string ux:Property="Text" />
    <string ux:Property="ErrorMessage" />
    <string ux:Property="IsValid" />
    <string ux:Property="InputHint" />
    <string ux:Property="AutoCapitalizationHint" />
    <string ux:Property="ActionStyle" />
    <string ux:Property="ActionTriggered" />

    <TextInput Value="{Property Text}" Height="30" Padding="5" PlaceholderText="Gib deine Email Adresse hier ein." PlaceholderColor="#44444450" InputHint="{Property InputHint}" AutoCapitalizationHint="{Property AutoCapitalizationHint}" ActionStyle="{Property ActionStyle}">
        <JavaScript>
            let Context = require("Modules/Context"),
                text = this.Text,
                errorMessage = this.ErrorMessage,
                isValid = this.IsValid;

            // Public Function
            this.validate = function() {
                return validateEmail();
            };

            this.clear = function() {
                text.value = "";
                
                return text.value;
            };

            this.setDefaultStroke = function() {
                isValid.value = "initial";
                
                return isValid.value;
            };
            // End of Public Functions

            function validateEmail() {
                let regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

                isValid.value = regex.test(text.value);

                return isValid.value;
            }

            function hideErrorMessage() {
                Context.clearErrorMessage();
                errorMessage.value = "";
            }

            module.exports = {
                validateEmail: validateEmail,
                hideErrorMessage: hideErrorMessage
            };
        </JavaScript>

        <Rectangle CornerRadius="4" Layer="Background">
            <Stroke ux:Name="Stroke" Width="1" Color="#bbb" />
        </Rectangle>

        <WhileNotFocused>
            <Callback Handler="{validateEmail}" />

            <WhileString Value="{Property IsValid}" Equals="false" CaseSensitive="false">
                <Change Stroke.Color="Red" />
            </WhileString>

            <WhileString Value="{Property IsValid}" Equals="true" CaseSensitive="false">
                <Change Stroke.Color="Green" />
            </WhileString>
        </WhileNotFocused>

        <WhileFocused>
            <Callback Handler="{hideErrorMessage}" />
        </WhileFocused>

        <WhileString Value="{Property ErrorMessage}" Equals="Email already exist" CaseSensitive="false">
            <DebugAction Message="Property ErrorMessage is SET" />
            <Change this.IsValid="false" />
            <Change EmailInfo.Visibility="Visible" />
        </WhileString>
    </TextInput>

    <Rectangle ux:Name="EmailInfo" CornerRadius="4" Visibility="Collapsed" Margin="0, 10, 0, 0" Padding="10">
        <Stroke Width="1" Color="Red" />
        <StackPanel>
            <Text TextWrapping="Wrap" FontSize="14">Diese Email Adresse ist bereits registriert</Text>
        </StackPanel>
    </Rectangle>
</StackPanel>